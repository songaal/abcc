<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- default field : id, keyword -->
<mapper namespace="org.fastcatsearch.db.mapper.IndexingResultMapper">
	<update id="createTable">
		create table
		IndexingResult (
		id int GENERATED ALWAYS AS IDENTITY,
		collectionId varchar(30),
		type varchar(30),
		step varchar(30),
		status varchar(30),
		docSize int,
		deleteSize int,
		isScheduled boolean,
		startTime timestamp,
		endTime timestamp DEFAULT NULL,
		duration int,
		primary key (id)
		)
	</update>

	<update id="createIndex" >
		create index collectionId_IndexingResult_index on IndexingResult(collectionId)
	</update>
	
	<select id="validateTable" parameterType="map" resultType="map">
		select id, collectionId, type, step, status, docSize
		from IndexingResult
		fetch first 1 rows only
	</select>

	<update id="dropTable" parameterType="map">
		drop table IndexingResult
	</update>

	<select id="getEntry" parameterType="int" resultType="org.fastcatsearch.db.vo.IndexingStatusVO">
		select *
		from IndexingResult where id = #{id}
	</select>

	<select id="getEntryList" parameterType="map" resultType="org.fastcatsearch.db.vo.IndexingStatusVO">
		select * from
		IndexingResult
		where collectionId = #{collectionId}
	</select>
	
	<select id="getRecentEntryList" parameterType="map" resultType="org.fastcatsearch.db.vo.IndexingStatusVO">
		select * from (
		select ROW_NUMBER() OVER() AS RNUM, rdata.* from
		IndexingResult rdata
		where collectionId = #{collectionId} order by endTime desc
		) rdata where RNUM &lt; ${num}
	</select>

	<select id="getCount" parameterType="map" resultType="int">
		select
		count(*)
		from IndexingResult
		where collectionId = #{collectionId}
	</select>

	<insert id="putEntry" parameterType="org.fastcatsearch.db.vo.IndexingStatusVO" useGeneratedKeys="true">
		insert into IndexingResult (
		collectionId, type, step, status, docSize, deleteSize,
		isScheduled, startTime, endTime, duration)
		values (
		#{collectionId}, #{type}, #{step}, #{status}, #{docSize}, #{deleteSize},
		#{isScheduled}, #{startTime}, #{endTime}, #{duration}
		)
	</insert>

	<delete id="deleteEntry" parameterType="map" >
		delete from IndexingResult
		where collectionId = #{collectionId} and type = #{type}
	</delete>
	
	
</mapper>