<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
Derby SQL 문법에 따른다.
 -->
<mapper namespace="org.fastcatsearch.db.mapper.DictionaryMapper">

    <update id="createTable" parameterType="map">
        create table ${table} (
        id bigint not null generated always as identity,
        <if test="columnSettings != null">
            <foreach item="column" index="index" collection="columnSettings">
                ${column.name} ${column.type},
            </foreach>
        </if>
        primary key (id)
        )
    </update>

    <update id="createIndex" parameterType="map">
		create index ${column}_${table}_index on ${table}(${column})
	</update>

    <select id="validateTable" parameterType="map" resultType="map">
        select id,
        <if test="columnSettings != null">
            <foreach item="column" index="index" collection="columnSettings" separator=",">
                ${column.name}
            </foreach>
        </if>
        from ${table}
        fetch first 1 rows only
    </select>

    <update id="dropTable" parameterType="map">
		drop table ${table}
	</update>

    <select id="getEntry" parameterType="int" resultType="map">
		select *
		from ${table} where id = #{id}
	</select>

    <!-- <select id="getEntryByKeyword" parameterType="string" resultType="map">
        select *
        from ${table} where UPPER(keyword) = UPPER(#{keyword})
    </select> -->
    <select id="getEntryListByWhereCondition" parameterType="string" resultType="map">
		select *
		from ${table} where ${whereCondition}
	</select>
    <select id="getEntryList" parameterType="map" resultType="map">
        <choose>
            <when test="start &gt; 0">
                select tmp2.*
                from (
                select row_number() over() as rownum, tmp.* from
                (
                select * from ${table}
                <if test="search != null and search != '' and columns != null">
                    <where>
                        <foreach item="column" index="index" collection="columns">
                            or UPPER(${column}) like UPPER(#{search})
                        </foreach>
                    </where>
                </if>
                <if test="sortAsc == false">
                    order by id desc
                </if>
                ) as tmp
                ) as tmp2 where rownum &gt;= #{start} and rownum &lt;= #{end}

            </when>
            <otherwise>
                select * from ${table} where id = -1
            </otherwise>
        </choose>
    </select>

    <select id="hasEntry" parameterType="map" resultType="int">
		select count(*) from ${table} 
		where UPPER(${column}) = UPPER(#{search})
	</select>

    <select id="getCount" parameterType="map" resultType="int">
        select count(*)
        from ${table}
        <if test="search != null and search != '' and columns != null">
            <where>
                <foreach item="column" index="index" collection="columns">
                    or UPPER(${column}) like UPPER(#{search})
                </foreach>
            </where>
        </if>
    </select>

    <insert id="putEntry" parameterType="map" useGeneratedKeys="true">
        insert into ${table}
        <if test="columns != null">
            <foreach item="column" index="index" collection="columns" open="(" separator="," close=")">
                ${column}
            </foreach>
        </if>
        values
        <if test="values != null">
            <foreach item="value" index="index" collection="values" open="(" separator="," close=")">
                #{value}
            </foreach>
        </if>

    </insert>

    <update id="updateEntry" parameterType="map">
        update ${table} set
        <if test="keyValueList != null">
            <foreach item="keyValue" index="index" collection="keyValueList" separator=",">
                ${keyValue.key} = #{keyValue.value}
            </foreach>
        </if>
        where id = #{id}
    </update>

    <delete id="deleteEntry" parameterType="map">
		delete from ${table} 
		where id = #{id}
	</delete>

    <delete id="deleteEntryList" parameterType="map">
		delete from ${table} 
		where id in (${idList})
	</delete>

    <delete id="truncate" parameterType="map">
		truncate table ${table} 
	</delete>
</mapper>