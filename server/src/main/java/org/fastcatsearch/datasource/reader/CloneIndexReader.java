/*
 * Copyright (c) 2013 Websquared, Inc.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 *
 * Contributors:
 *     lupfeliz - initial API and implementation
 */

package org.fastcatsearch.datasource.reader;

import org.fastcatsearch.datasource.SourceModifier;
import org.fastcatsearch.datasource.reader.annotation.SourceReader;
import org.fastcatsearch.ir.IRService;
import org.fastcatsearch.ir.common.IRException;
import org.fastcatsearch.ir.config.SingleSourceConfig;
import org.fastcatsearch.ir.search.CollectionHandler;
import org.fastcatsearch.ir.settings.SchemaSetting;
import org.fastcatsearch.service.ServiceManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.util.Map;

@SourceReader(name="INDEX_CLONE")
public class CloneIndexReader extends SingleSourceReader<Map<String, Object>> {

	private Map<String, Object> dataRecord;

	private CollectionHandler collectionHandler;

	public CloneIndexReader() {
		super();
	}

	public CloneIndexReader(String collectionId, File filePath, SingleSourceConfig singleSourceConfig, SourceModifier<Map<String, Object>> sourceModifier, String lastIndexTime)
			throws IRException {
		super(collectionId, filePath, singleSourceConfig, sourceModifier, lastIndexTime);
	}

	@Override
	protected void initParameters() {
		registerParameter(new SourceReaderParameter("collection", "collection", "Select Collection's Id For Dump", SourceReaderParameter.TYPE_STRING, true, null));
	}

	@Override
	public void init() throws IRException {
		String collection = getConfigString("collection");
		IRService irService = ServiceManager.getInstance().getService(IRService.class);
		collectionHandler = irService.collectionHandler(collection);
	}

	@Override
	public void close() throws IRException {
	}

	@Override
	public boolean hasNext() throws IRException {
		if(dataRecord == null) {
			fill();
		}
		if(dataRecord == null) {
			return false;
		} else {
			return true;
		}
	}

	@Override
	protected final Map<String, Object> next() throws IRException {
		if(dataRecord == null) {
			fill();
		}
		Map<String, Object>ret = dataRecord;
		dataRecord = null;
		return ret;
	}

	private void fill() throws IRException {
	}

	@Override
	public SchemaSetting getAutoGeneratedSchemaSetting() {
		Map<String, String> properties = singleSourceConfig.getProperties();
		String collection = properties.get("collection");
		IRService irService = ServiceManager.getInstance().getService(IRService.class);
		CollectionHandler collectionHandler = irService.collectionHandler(collection);
		return collectionHandler.schema().schemaSetting();
	}
}
